from typing import List, Dict
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from database.models import Lead
from openai import AsyncOpenAI
import asyncio
from config import AI_TOKEN
from function.lead_function import LeadFunction
import tiktoken
import time

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_TOKENS = 9000  # –¥–ª—è –≤—Ö–æ–¥–∞, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç —É–º–µ—Å—Ç–∏–ª—Å—è
client = AsyncOpenAI(api_key=AI_TOKEN)

tokenizer = tiktoken.encoding_for_model("gpt-3.5-turbo")

def estimate_tokens(text: str) -> int:
    return len(tokenizer.encode(text))

async def split_leads_by_tokens(leads: List[Dict[str, str]], max_tokens: int) -> List[List[Dict[str, str]]]:
    batches = []
    current_batch = []
    current_tokens = 0

    for lead in leads:
        line = f"id: {lead['id']}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {lead['message']}"
        token_count = estimate_tokens(line)

        if current_tokens + token_count > max_tokens:
            batches.append(current_batch)
            current_batch = []
            current_tokens = 0

        current_batch.append(lead)
        current_tokens += token_count

    if current_batch:
        print(f"[DEBUG] –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞—Ç—á ‚Äî {len(current_batch)} –ª–∏–¥–æ–≤, {current_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
        batches.append(current_batch)

    return batches

async def ask_gpt_to_categorize(batch: List[Dict[str, str]]) -> List[Dict[str, str]]:
    system_prompt = (
        "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫-—é—Ä–∏—Å—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, "
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: '–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ', '–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã', '–í–æ–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ', '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ', '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã' –∏ —Ç.–ø. "
        "–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–Ω—è—Ç–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫—É —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. "
        "–í–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: [{\"id\": <—á–∏—Å–ª–æ>, \"category\": <—Å—Ç—Ä–æ–∫–∞>}]."
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown, –Ω–µ –¥–æ–±–∞–≤–ª—è–π ```json –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã ‚Äî —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON."
        "–í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–π **—Ç–æ–ª—å–∫–æ —Ç–µ ID**, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π ID —Å–∞–º."
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —É–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞ ‚Äî –Ω–∞–ø–∏—à–∏ null"

    )

    user_input = "\n".join([
    f"id: {item['id']}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {item['message']}" for item in batch
])

    # # üîß –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å prompt –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    # print("========== GPT SYSTEM PROMPT ==========")
    # print(system_prompt)
    # print("========== GPT USER INPUT (batched) ==========")
    # print(user_input)
    # print("========================================")

    response = await client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_input}
        ],
        temperature=0.3
    )

    import json
    try:
        content = response.choices[0].message.content
        return json.loads(content)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e)
        print("–û—Ç–≤–µ—Ç GPT:", response.choices[0].message.content)
        return []

async def run_full_job():
    start_time = time.time()
    leads = await LeadFunction.fetch_unlabeled_leads()
    print(f"–í—Å–µ–≥–æ –ª–∏–¥–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(leads)}")

    batches = await split_leads_by_tokens(leads, MAX_TOKENS)
    print(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –±–∞—Ç—á–µ–π: {len(batches)}")

    all_results = []
    for i, batch in enumerate(batches):
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {i+1}/{len(batches)}...")
        ids = [lead['id'] for lead in batch]
        #print(f"IDs –≤ –±–∞—Ç—á–µ: {ids}")

        try:
            categorized = await ask_gpt_to_categorize(batch)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(categorized)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            # print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç GPT:")
            # print(categorized)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT:", e)
            continue  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–∞—Ç—á—É

        try:
            await LeadFunction.update_lead_categories(categorized)
            print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {len(categorized)} –ª–∏–¥–æ–≤")
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", e)
            continue

        all_results.extend(categorized)
        await asyncio.sleep(1)

    end_time = time.time()
    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(all_results)} –ª–∏–¥–æ–≤.")
    print(f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥.")

    #await LeadFunction.update_lead_categories(all_results)
    #print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


if __name__ == "__main__":
    import asyncio
    asyncio.run(run_full_job())