from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from bot.state import Chat
import bot.keyboards as kb
from function.operator_function import OperatorFunction
from function.tiktoken_function import TiktokenFunction
from function.category_function import CategoryFunction
from app.generator import send_to_openai
from app.category_list import LAW_CATEGORIES

user = Router()

@user.message(F.text == '‚ùå–û—Ç–º–µ–Ω–∞')
@user.message(CommandStart())
async def cmd_start(message:Message,state:FSMContext):
    await state.clear()
    await message.answer(
    "*–ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –ª–∏–¥–∞–º. –°–ø—Ä–æ—Å–∏ ‚Äî –∫—Ç–æ –ª—É—á—à–∏–π, –∫—Ç–æ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è, –≥–¥–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã—à–µ.*\n\n"
    "*–Ø –±—ã—Å—Ç—Ä–æ –≤—Å—ë –ø—Ä–æ–≤–µ—Ä—é –∏ –¥–∞–º —Ç–µ–±–µ —è—Å–Ω—ã–π –æ—Ç–≤–µ—Ç üí°*", parse_mode='Markdown',reply_markup=kb.main_menu)

@user.message(F.text == 'üí¨ –ß–∞—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º')
async def chat_handler(message:Message,state:FSMContext):
    await state.set_state(Chat.chat)
    await message.answer('*–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å*',parse_mode='Markdown',reply_markup=kb.cancel)

@user.message(Chat.chat)
async def chatting_handlers(message:Message,state:FSMContext):
    await state.set_state(Chat.wait)

    response = message.text
    data = await CategoryFunction.generate_compact_stats_text()
    ai_response = await send_to_openai(data, response)
    tokens = await TiktokenFunction.async_count_tokens(data)
    print(f"–¢–æ–∫–µ–Ω–æ–≤: {tokens}")
    print(len(data))
    await message.answer(ai_response ,parse_mode='Markdown')
    await state.set_state(Chat.chat)
    

@user.message(Chat.wait)
async def cancel_chat(message:Message):
    await message.answer("‚è≥ –Ø –≤—Å—ë –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏.")


@user.message(F.text == 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
async def instruction_handler(message:Message):
    await message.answer(
    "*üß† –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Dispatcher:*\n\n"
    "üìÖ *–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 03:00 –Ω–æ—á–∏* –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É:\n\n"
    "‚Äî –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ CRM –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥–¥–µ —Ä–æ–ª—å = 3\n"
    "‚Äî –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –∏–º–µ–Ω–∞ –∏ ID\n"
    "‚Äî –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ª–∏–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞\n"
    "‚Äî –°—Ç–µ—Ä–∏–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤\n"
    "‚Äî –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ª–∏–¥—ã –ø–æ ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –¥–µ–ª–∏—Ç –Ω–∞ –±–∞—Ç—á–∏ (–ø–æ—Ä—Ü–∏–∏ –¥–ª—è –ò–ò)\n"
    "‚Äî –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥—ã–π –±–∞—Ç—á –≤ OpenAI (gpt-3.5/gpt-4), —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
    "‚Äî –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n"
    "‚Äî –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤—Å–µ –ª–∏–¥—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î\n"
    "‚Äî –°—Ç—Ä–æ–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ 3 –ø–µ—Ä–∏–æ–¥–∞–º: –∑–∞ 3 –º–µ—Å—è—Ü–∞, 1 –º–µ—Å—è—Ü –∏ 1 –Ω–µ–¥–µ–ª—é\n\n"
    "‚è±Ô∏è –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è *—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é*, –∑–∞–Ω–∏–º–∞–µ—Ç ~30‚Äì45 –º–∏–Ω—É—Ç. –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–æ—á—å—é ‚Äî –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è\n\n"
    "üîÑ *–ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç* –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–Ω–ª–∞–π–Ω–µ —á–µ—Ä–µ–∑ CRM\n\n"
    "*ü§ñ Telegram-–±–æ—Ç:* –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
    "‚Äî –ö—Ç–æ —Å–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä?\n"
    "‚Äî –ö—Ç–æ –ª—É—á—à–∏–π –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?\n"
    "‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 3 –º–µ—Å—è—Ü–∞, –º–µ—Å—è—Ü –∏–ª–∏ –Ω–µ–¥–µ–ª—é\n\n"
    "üì® –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω API-—Ä–æ—É—Ç `assign-lead` ‚Äî —Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Ç—É–¥–∞ –∑–∞—è–≤–∫—É, –∞ –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∞–µ—à—å *ID –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞*,\n"
    "–∏—Å—Ö–æ–¥—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–∏–¥–∞ –∏ —Å–æ–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üìä",
    parse_mode='Markdown'
)
    

@user.message(F.text == 'üë• –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤')
async def operators_list(message:Message):
    operators = await OperatorFunction.get_all_operators()

    if not operators:
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    text = "*üìã –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:*\n\n"
    for op in operators:
        text += f"‚Äî *{op.name}* (`ID: {op.operator_id}`)\n"

    await message.answer(text, parse_mode="Markdown")


@user.message(F.text == 'üìÇ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
async def categories_list(message: Message):
    text = "*üìö –°–ø–∏—Å–æ–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:*\n\n"
    for i, cat in enumerate(LAW_CATEGORIES, start=1):
        text += f"{i}. {cat}\n"

    await message.answer(text, parse_mode="Markdown")
