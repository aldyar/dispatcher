import requests
from config import AI_TOKEN
from app.category_list import LAW_CATEGORIES
from typing import List, Dict
from openai import AsyncOpenAI
from config import PROXY
import httpx

proxy_url = PROXY

transport = httpx.AsyncHTTPTransport(proxy=proxy_url)

client = AsyncOpenAI(
    api_key=AI_TOKEN
    ,http_client=httpx.AsyncClient(transport=transport)
)

def send_to_openai_req(message: str) -> str:
    url = "https://api.openai.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {AI_TOKEN}",  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á
        "Content-Type": "application/json"
    }
    prompt = f"""
–ü—Ä–æ—á–∏—Ç–∞–π —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –±–æ—Ç–æ–º. –û–ø—Ä–µ–¥–µ–ª–∏, –∫ –∫–∞–∫–æ–º—É —Ä–∞–∑–¥–µ–ª—É –ø—Ä–∞–≤–∞ –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è. 
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Ç–∏–ø –ø—Ä–∞–≤–∞ —Å—Ç—Ä–æ–≥–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞: {LAW_CATEGORIES}

–î–∏–∞–ª–æ–≥:
{message}
"""
    data = {
        "model": "gpt-3.5-turbo",
        "messages": [
            {"role": "user", "content": prompt}
        ]
    }
    proxies = {
        "http": PROXY,
        "https": PROXY,
    }
    # print(prompt)
    response = requests.post(url, headers=headers, json=data, proxies=proxies)

    response.raise_for_status()  # –ø–æ–¥–Ω–∏–º–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞

    return response.json()["choices"][0]["message"]["content"]


# response = send_to_openai('–ø—Ä–∏–≤–µ—Ç –º–µ–Ω—è –∑–æ–≤—É—Ç Aldiyar –º–Ω–µ 23 –∏ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —à—Ç–∞—Ç–æ–≤ –∞ –°–®–ê')
# print(response)


async def ask_gpt_to_categorize(batch: List[Dict[str, str]]) -> List[Dict[str, str]]:
    allowed_categories = "\n".join(f"- {cat}" for cat in LAW_CATEGORIES)
    system_prompt = (
        "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫-—é—Ä–∏—Å—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, "
        # "–Ω–∞–ø—Ä–∏–º–µ—Ä: '–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ', '–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã', '–í–æ–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ', '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ', '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã' –∏ —Ç.–ø. "
        # "–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–Ω—è—Ç–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫—É —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. "
        # "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ **–æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é** –∏–∑ —Å—Ç—Ä–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:\n\n"
        "–í—ã–±–∏—Ä–∞–π **—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é** —Å—Ç—Ä–æ–≥–æ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Å–∞–º:\n\n"
        f"{allowed_categories}\n\n"
        "–í–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: [{\"id\": <—á–∏—Å–ª–æ>, \"category\": <—Å—Ç—Ä–æ–∫–∞>}]."
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown, –Ω–µ –¥–æ–±–∞–≤–ª—è–π ```json –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã ‚Äî —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON."
        "–í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–π **—Ç–æ–ª—å–∫–æ —Ç–µ ID**, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π ID —Å–∞–º."
        "–ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞ ‚Äî –Ω–∞–ø–∏—à–∏ null. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏ –æ–¥–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ."

    )

    user_input = "\n".join([
    f"id: {item['id']}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {item['message']}" for item in batch
])

    # üîß –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å prompt –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    # print("========== GPT SYSTEM PROMPT ==========")
    # print(system_prompt)
    # print("========== GPT USER INPUT (batched) ==========")
    # print(user_input)
    # print("========================================")

    response = await client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_input}
        ],
        temperature=0.3
    )

    import json
    try:
        content = response.choices[0].message.content
        # print("========== RAW RESPONSE FROM GPT ==========")
        # print(content)
        # print("===========================================")
        return json.loads(content)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e)
        # print("–û—Ç–≤–µ—Ç GPT:", response.choices[0].message.content)
        return []
    

async def send_to_openai(data: str,message) -> str:
    url = "https://api.openai.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {AI_TOKEN}",  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á
        "Content-Type": "application/json"
    }
    prompt = f"""
–¢—ã ‚Äî —É–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü–æ–ª—É—á–∞–µ—à—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:

üìã –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:
–ò–º—è|–ö–∞—Ç–µ–≥–æ—Ä–∏—è|All:–≤—Å–µ–≥–æ/—É—Å–ø.(%)|W:–≤—Å–µ–≥–æ/—É—Å–ø.(%)|M:–≤—Å–µ–≥–æ/—É—Å–ø.(%)

üìå –£—Å–ª–æ–≤–∏—è:
‚Äî –£—á–∏—Ç—ã–≤–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, —É –∫–æ–≥–æ –∑–∞ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (W, M, All) –º–∏–Ω–∏–º—É–º 5 –∑–∞—è–≤–æ–∫
‚Äî –ù–µ –≤–∫–ª—é—á–∞–π –≤ –æ—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å –º–µ–Ω—å—à–∏–º —á–∏—Å–ª–æ–º ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —É –Ω–∏—Ö 100%
‚Äî –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏
‚Äî –£–∫–∞–∂–∏ –∏–º—è, –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤—Å–µ–≥–æ –∑–∞—è–≤–æ–∫, —É—Å–ø–µ—à–Ω—ã—Ö –∏ –ø—Ä–æ—Ü–µ–Ω—Ç
‚Äî –ù–µ –ø–∏—à–∏ —Ñ–æ—Ä–º—É–ª—ã

–î–∞–Ω–Ω—ã–µ:
{data}

–í–æ–ø—Ä–æ—Å:
{message}
"""
    data = {
        "model": "gpt-4o",
        "messages": [
            {"role": "user", "content": prompt}
        ]
    }
    proxies = {
        "http": PROXY,
        "https": PROXY,
    }
    try:
        response = requests.post(url, headers=headers, json=data,proxies=proxies)
        response.raise_for_status()  # –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–µ 2xx
        res_json = response.json()

        if "choices" in res_json:
            return res_json["choices"][0]["message"]["content"]
        elif "error" in res_json:
            raise Exception(f"–û—à–∏–±–∫–∞ –æ—Ç OpenAI: {res_json['error']['message']}")
        else:
            raise Exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI: {res_json}")
            
    except requests.exceptions.RequestException as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {str(e)}")
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ OpenAI: {str(e)}")